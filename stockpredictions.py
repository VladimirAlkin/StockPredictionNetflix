# -*- coding: utf-8 -*-
"""StockPredictions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18cDKpS1JJiA9EAaX6qMKsf_kteWtl1Qq
"""

# Install dependencies 
import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
plt.style.use('bmh')

# Load the Data
from google.colab import files
uploaded = files.upload()

# Store data to data frame
df = pd.read_csv('NFLX.csv')
df.head(6)

# Get number of trading days
df.shape

# Close price data
plt.figure(figsize=(16,8))
plt.title('Netflix Stock')
plt.xlabel('Days')
plt.ylabel('Close price USD')
plt.plot(df['Close'])
plt.show()

# Data Frame for only Close Price
df = df[['Close']]
df.head(4)

#Crate a variable to predict 'x' days 
future_days = 25
#Create a new target data column shifted 'x' days up
df['Prediction'] = df[['Close']].shift(-future_days)
df.tail(4)

#Create the deature data set (X) and convert it to a numpy array and remox last 'x' rows(days)
X = np.array(df.drop(['Prediction'], 1))[:-future_days]
print(X)

#Create the target data set (y) convert it to a numpy array and get all of the target values except last 'x' rows (days)
y = np.array(df['Prediction'])[:-future_days]
print(y)

#Split the data into 75% training and 25% testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25)

#Create the models
#Create the decesion tree regression model
tree = DecisionTreeRegressor().fit(X_train, y_train)
#Create the linear regression model
lr = LinearRegression().fit(X_train, y_train)

#Get the last 'x' rows of the future data set
x_future = df.drop(['Prediction'], 1)[:-future_days]
x_future = x_future.tail(future_days)
x_future = np.array(x_future)
x_future

#Show the model tree prediction
tree_prediction = tree.predict(x_future)
print(tree_prediction,'\n')
print('*'*50, '\n')
#Show the model linear regression prediction
lr_prediction = lr.predict(x_future)
print(lr_prediction)

#Visiualize data
predictions = tree_prediction

valid = df[X.shape[0]:]
valid['Predictions'] = predictions
plt.figure(figsize=(24,12))
plt.title("Model of Netflix's close prices prediction")
plt.xlabel('Days')
plt.ylabel('Close price USD')
plt.plot(df['Close'])
plt.plot(valid[['Close','Predictions']])
plt.legend(['Original', 'Valid', 'Prediction'])
plt.show()

#Visiualize data
predictions = lr_prediction

valid = df[X.shape[0]:]
valid['Predictions'] = predictions
plt.figure(figsize=(24,12))
plt.title("Model of Netflix's close prices prediction")
plt.xlabel('Days')
plt.ylabel('Close price USD')
plt.plot(df['Close'])
plt.plot(valid[['Close','Predictions']])
plt.legend(['Original', 'Valid', 'Prediction'])
plt.show()